spring:
  application:
    name: scholar-ai
  security:
    user:
      name: ${USER_NAME:your_username_here}
      password: ${USER_PASSWORD:your_password_here}
  app:
    jwtSecret: ${JWT_SECRET:your_jwt_secret_here}
    access:
      expiration-ms: ${JWT_ACCESS_EXPIRATION_MS:6000}  # 60,0000 milliseconds = 15 minute
    refresh:
      expiration-ms: ${JWT_REFRESH_EXPIRATION_MS:604800000} #7day

  # ──── Single "datasource" block ────
  datasource:
    # ─ CORE DB (this remains the "default" DataSource) ─
    url: jdbc:postgresql://localhost:5433/coreDB
    username: ${CORE_DB_USER}
    password: ${CORE_DB_PASSWORD}
    driver-class-name: org.postgresql.Driver
    hikari:
      minimum-idle: 3
      maximum-pool-size: 10

    # ─ PAPER DB (nested under the same "datasource" key) ─
    paper:
      url: jdbc:postgresql://localhost:5435/paperDB
      username: ${PAPER_DB_USER}
      password: ${PAPER_DB_PASSWORD}
      driver-class-name: org.postgresql.Driver
      hikari:
        minimum-idle: 3
        maximum-pool-size: 10

  # ──── JPA for "coreDB" (unchanged) ────
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    open-in-view: false

  # ──── Redis, RabbitMQ, JWT, CORS, etc. ────
  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
      password: ${REDIS_PASSWORD}
      timeout: 2000
      database: 0
      lettuce:
        pool:
          max-active: 8
          max-idle: 8
          min-idle: 0

  rabbitmq:
    host: ${RABBITMQ_HOST:localhost}
    port: ${RABBITMQ_PORT:5672}
    username: ${RABBITMQ_USER}
    password: ${RABBITMQ_PASSWORD}

  google:
    client-id: ${SPRING_GOOGLE_CLIENT_ID}
    client-secret: ${SPRING_GOOGLE_CLIENT_SECRET}
  github:
    client-id: ${SPRING_GITHUB_CLIENT_ID}
    client-secret: ${SPRING_GITHUB_CLIENT_SECRET}
    redirect-uri: http://localhost:3000/callback

  sendgrid:
    api-key: ${SENDGRID_API_KEY}
    from-email: ${SENDGRID_FROM_EMAIL}
    template-id: ${SENDGRID_TEMPLATE_ID}


server:
  port: 8080
  error:
    include-message: always
    include-binding-errors: always
    include-stacktrace: never
    include-exception: false

management:
  info:
    git:
      mode: full
  endpoints:
    web:
      exposure:
        include: health,info,prometheus,metrics
      base-path: /actuator
  endpoint:
    health:
      show-details: always
      probes:
        enabled: true
  metrics:
    tags:
      application: "${spring.application.name}"
  tracing:
    enabled: false
    sampling:
      probability: 1

springdoc:
  api-docs:
    enabled: true
  show-actuator: true
  use-management-port: false
  swagger-ui:
    path: /docs

resilience4j:
  ratelimiter:
    configs:
      default:
        limit-for-period: 300
        limit-refresh-period: 1m
        timeout-duration: 0s
    instances:
      standard-api:
        base-config: default
      test-error:
        limit-for-period: 30
        limit-refresh-period: 10s
        timeout-duration: 0s
      actuator:
        limit-for-period: 60
        limit-refresh-period: 1m
        timeout-duration: 0s

scholarai:
  rabbitmq:
    exchange: scholarai.exchange
    paper-fetch:
      queue: scholarai.paper.fetch.queue
      routing-key: scholarai.paper.fetch
      completed-queue: scholarai.paper.fetch.completed.queue
      completed-routing-key: scholarai.paper.fetch.completed
    web-search:
      queue: scholarai.websearch.queue
      routing-key: scholarai.websearch
      completed-queue: scholarai.websearch.completed.queue
      completed-routing-key: scholarai.websearch.completed
    extraction:
      queue: scholarai.extraction.queue
      routing-key: scholarai.extraction
      completed-queue: scholarai.extraction.completed.queue
      completed-routing-key: scholarai.extraction.completed
    summarization:
      queue: scholarai.summarization.queue
      routing-key: scholarai.summarization
      completed-queue: scholarai.summarization.completed.queue
      completed-routing-key: scholarai.summarization.completed
    gap-analysis:
      queue: scholarai.gap.queue
      routing-key: scholarai.gap
      completed-queue: scholarai.gap.completed.queue
      completed-routing-key: scholarai.gap.completed

cors:
  allowed-origins: ${CORS_ALLOWED_ORIGINS:http://localhost:3000,https://scholarAI.tech,https://*.vercel.app}

logging:
  level:
    org.springframework.data.redis: DEBUG
    io.lettuce.core: DEBUG
    org.springframework.amqp: DEBUG
    com.rabbitmq: DEBUG
    dev.project.scholar_ai.messaging.listener: DEBUG
