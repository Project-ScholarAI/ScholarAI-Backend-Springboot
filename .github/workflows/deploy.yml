name: Spring Boot Backend CI/CD

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  AZURE_CONTAINER_REGISTRY: scholarai
  RESOURCE_GROUP: scholarai-rg
  CONTAINER_NAME: scholarai-spring
  IMAGE_NAME: scholarai-spring
  CONTAINER_GROUP_NAME: scholarai-stack

jobs:
    # test:
  #   runs-on: ubuntu-latest
  #   steps:
  #   - uses: actions/checkout@v4
  #   
  #   - name: Setup Java
  #     uses: actions/setup-java@v4
  #     with:
  #       java-version: '21'
  #       distribution: 'corretto'
  #   
  #   - name: Cache Maven dependencies
  #     uses: actions/cache@v3
  #     with:
  #       path: ~/.m2
  #       key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
  #       restore-keys: ${{ runner.os }}-m2
  #   
  #   - name: Make mvnw executable
  #     run: chmod +x mvnw
  #   
  #   - name: Run tests
  #     run: ./mvnw clean test
  #   
  #   - name: Build application
  #     run: ./mvnw clean package -DskipTests

  build-and-deploy:
    # needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Login to Azure Container Registry
      run: |
        az acr login --name ${{ env.AZURE_CONTAINER_REGISTRY }}
    
    - name: Build and push Docker image
      run: |
        docker build \
          --build-arg ENV=prod \
          -t ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }} \
          -t ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.IMAGE_NAME }}:latest \
          -f docker/Dockerfile .
        
        docker push ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }}
        docker push ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.IMAGE_NAME }}:latest
    
    - name: Deploy as Container Group (Like Docker Compose)
      run: |
        # Delete existing container group if it exists
        if az container show --resource-group ${{ env.RESOURCE_GROUP }} --name scholarai-stack > /dev/null 2>&1; then
          echo "Deleting existing container group..."
          az container delete --resource-group ${{ env.RESOURCE_GROUP }} --name scholarai-stack --yes
          sleep 30
        fi
        
        # Create container group with all services (like docker-compose)
        az container create \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --name scholarai-stack \
          --location eastus \
          --os-type Linux \
          --restart-policy Always \
          --dns-name-label scholarai-api \
          --yaml-file - <<EOF
        apiVersion: '2021-09-01'
        location: eastus
        name: scholarai-stack
        properties:
          containers:
          # PostgreSQL Database
          - name: postgres
            properties:
              image: postgres:17-alpine
              ports:
              - port: 5432
              environmentVariables:
              - name: POSTGRES_USER
                value: ${{ secrets.CORE_DB_USER }}
              - name: POSTGRES_PASSWORD
                secureValue: ${{ secrets.CORE_DB_PASSWORD }}
              - name: POSTGRES_DB
                value: coreDB
              resources:
                requests:
                  cpu: 0.25
                  memoryInGb: 0.5
          
          # RabbitMQ
          - name: rabbitmq
            properties:
              image: rabbitmq:3.12-alpine
              ports:
              - port: 5672
              - port: 15672
              environmentVariables:
              - name: RABBITMQ_DEFAULT_USER
                value: ${{ secrets.RABBITMQ_USER }}
              - name: RABBITMQ_DEFAULT_PASS
                secureValue: ${{ secrets.RABBITMQ_PASSWORD }}
              resources:
                requests:
                  cpu: 0.25
                  memoryInGb: 0.5
          
          # Redis
          - name: redis
            properties:
              image: redis:7-alpine
              ports:
              - port: 6379
              command:
              - redis-server
              - --requirepass
              - ${{ secrets.REDIS_PASSWORD }}
              resources:
                requests:
                  cpu: 0.1
                  memoryInGb: 0.25
          
          # Spring Boot Application
          - name: api
            properties:
              image: ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }}
              ports:
              - port: 8080
              environmentVariables:
              - name: SPRING_PROFILES_ACTIVE
                value: prod
              - name: ENV
                value: prod
              - name: CORE_DB_HOST
                value: localhost  # Same container group = localhost
              - name: CORE_DB_PORT
                value: "5432"
              - name: CORE_DB_NAME
                value: coreDB
              - name: CORE_DB_USER
                value: ${{ secrets.CORE_DB_USER }}
              - name: CORE_DB_PASSWORD
                secureValue: ${{ secrets.CORE_DB_PASSWORD }}
              - name: PAPER_DB_HOST
                value: localhost
              - name: PAPER_DB_PORT
                value: "5432"
              - name: PAPER_DB_NAME
                value: paperDB
              - name: PAPER_DB_USER
                value: ${{ secrets.PAPER_DB_USER }}
              - name: PAPER_DB_PASSWORD
                secureValue: ${{ secrets.PAPER_DB_PASSWORD }}
              - name: RABBITMQ_HOST
                value: localhost
              - name: RABBITMQ_PORT
                value: "5672"
              - name: RABBITMQ_USER
                value: ${{ secrets.RABBITMQ_USER }}
              - name: RABBITMQ_PASSWORD
                secureValue: ${{ secrets.RABBITMQ_PASSWORD }}
              - name: REDIS_HOST
                value: localhost
              - name: REDIS_PORT
                value: "6379"
              - name: REDIS_PASSWORD
                secureValue: ${{ secrets.REDIS_PASSWORD }}
              - name: JWT_SECRET
                secureValue: ${{ secrets.JWT_SECRET }}
              - name: JWT_ACCESS_EXPIRATION_MS
                value: ${{ secrets.JWT_ACCESS_EXPIRATION_MS }}
              - name: JWT_REFRESH_EXPIRATION_MS
                value: ${{ secrets.JWT_REFRESH_EXPIRATION_MS }}
              - name: SPRING_GOOGLE_CLIENT_ID
                value: ${{ secrets.SPRING_GOOGLE_CLIENT_ID }}
              - name: SPRING_GOOGLE_CLIENT_SECRET
                secureValue: ${{ secrets.SPRING_GOOGLE_CLIENT_SECRET }}
              - name: SPRING_GITHUB_CLIENT_ID
                value: ${{ secrets.SPRING_GITHUB_CLIENT_ID }}
              - name: SPRING_GITHUB_CLIENT_SECRET
                secureValue: ${{ secrets.SPRING_GITHUB_CLIENT_SECRET }}
              - name: SENDGRID_API_KEY
                secureValue: ${{ secrets.SENDGRID_API_KEY }}
              - name: SENDGRID_FROM_EMAIL
                value: ${{ secrets.SENDGRID_FROM_EMAIL }}
              - name: SENDGRID_TEMPLATE_ID
                value: ${{ secrets.SENDGRID_TEMPLATE_ID }}
              resources:
                requests:
                  cpu: 0.5
                  memoryInGb: 1.0
          
          ipAddress:
            type: Public
            ports:
            - protocol: tcp
              port: 8080
            - protocol: tcp
              port: 15672  # RabbitMQ management UI
            dnsNameLabel: scholarai-api
          
          imageRegistryCredentials:
          - server: ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io
            username: ${{ secrets.ACR_USERNAME }}
            password: ${{ secrets.ACR_PASSWORD }}
          
          osType: Linux
          restartPolicy: Always
        tags: {}
        type: Microsoft.ContainerInstance/containerGroups
        EOF
        
        echo "✅ Container group deployed successfully!"
        echo "🌐 API: https://scholarai-api.eastus.azurecontainer.io:8080"
        echo "🐰 RabbitMQ UI: https://scholarai-api.eastus.azurecontainer.io:15672" 