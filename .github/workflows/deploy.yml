name: Spring Boot Backend CI/CD

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  AZURE_CONTAINER_REGISTRY: scholarai
  RESOURCE_GROUP: scholarai-rg
  CONTAINER_NAME: scholarai-spring
  IMAGE_NAME: scholarai-spring
  CONTAINER_GROUP_NAME: scholarai-stack

jobs:
    # test:
  #   runs-on: ubuntu-latest
  #   steps:
  #   - uses: actions/checkout@v4
  #   
  #   - name: Setup Java
  #     uses: actions/setup-java@v4
  #     with:
  #       java-version: '21'
  #       distribution: 'corretto'
  #   
  #   - name: Cache Maven dependencies
  #     uses: actions/cache@v3
  #     with:
  #       path: ~/.m2
  #       key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
  #       restore-keys: ${{ runner.os }}-m2
  #   
  #   - name: Make mvnw executable
  #     run: chmod +x mvnw
  #   
  #   - name: Run tests
  #     run: ./mvnw clean test
  #   
  #   - name: Build application
  #     run: ./mvnw clean package -DskipTests

  build-and-deploy:
    # needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Login to Azure Container Registry
      run: |
        az acr login --name ${{ env.AZURE_CONTAINER_REGISTRY }}
    
    - name: Build and push Docker image
      run: |
        docker build \
          --build-arg ENV=prod \
          -t ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }} \
          -t ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.IMAGE_NAME }}:latest \
          -f docker/Dockerfile .
        
        docker push ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }}
        docker push ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.IMAGE_NAME }}:latest
    
    - name: Deploy as Container Group (Simplified & Reliable)
      run: |
        # Clean up ALL existing containers first (including old timestamped ones)
        echo "üßπ Cleaning up ALL existing containers..."
        
        # Delete all containers that match our patterns
        for pattern in "scholarai-api" "scholarai-stack" "scholarai-core-db" "scholarai-paper-db" "scholarai-rabbitmq" "scholarai-redis" "scholarai-buet"; do
          echo "Looking for containers with pattern: $pattern"
          for container in $(az container list --resource-group ${{ env.RESOURCE_GROUP }} --query "[?contains(name, '$pattern')].name" --output tsv); do
            if [ ! -z "$container" ]; then
              echo "Deleting container: $container"
              az container delete --resource-group ${{ env.RESOURCE_GROUP }} --name $container --yes
            fi
          done
        done
        
        # Wait for cleanup to complete
        echo "‚è≥ Waiting for cleanup to complete..."
        sleep 60
        
        # Verify cleanup
        echo "üîç Verifying cleanup..."
        remaining=$(az container list --resource-group ${{ env.RESOURCE_GROUP }} --query "[?contains(name, 'scholarai')].name" --output tsv | wc -l)
        echo "Remaining ScholarAI containers: $remaining"
        
        # Use consistent naming for stable URLs
        CORE_DB_HOST="scholarai-buet-core-db.eastus.azurecontainer.io"
        PAPER_DB_HOST="scholarai-buet-paper-db.eastus.azurecontainer.io"
        RABBITMQ_HOST="scholarai-buet-rabbitmq.eastus.azurecontainer.io"
        REDIS_HOST="scholarai-buet-redis.eastus.azurecontainer.io"
        
        # Create a simple container group with just the Spring Boot app first
        # This approach is more reliable than complex YAML
        echo "Creating container group with Spring Boot app..."
        az container create \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --name scholarai-buet-api \
          --image ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }} \
          --registry-login-server ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io \
          --registry-username ${{ secrets.ACR_USERNAME }} \
          --registry-password ${{ secrets.ACR_PASSWORD }} \
          --dns-name-label scholarai-buet-api \
          --os-type Linux \
          --ports 8080 \
          --cpu 1 \
          --memory 2 \
          --environment-variables \
            SPRING_PROFILES_ACTIVE=prod \
            ENV=prod \
            CORE_DB_HOST=$CORE_DB_HOST \
            CORE_DB_PORT=5432 \
            CORE_DB_NAME=coreDB \
            CORE_DB_USER=${{ secrets.CORE_DB_USER }} \
            CORE_DB_PASSWORD=${{ secrets.CORE_DB_PASSWORD }} \
            PAPER_DB_HOST=$PAPER_DB_HOST \
            PAPER_DB_PORT=5432 \
            PAPER_DB_NAME=paperDB \
            PAPER_DB_USER=${{ secrets.PAPER_DB_USER }} \
            PAPER_DB_PASSWORD=${{ secrets.PAPER_DB_PASSWORD }} \
            RABBITMQ_HOST=$RABBITMQ_HOST \
            RABBITMQ_PORT=5672 \
            RABBITMQ_USER=${{ secrets.RABBITMQ_USER }} \
            RABBITMQ_PASSWORD=${{ secrets.RABBITMQ_PASSWORD }} \
            REDIS_HOST=$REDIS_HOST \
            REDIS_PORT=6379 \
            REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }} \
            JWT_SECRET=${{ secrets.JWT_SECRET }} \
            JWT_ACCESS_EXPIRATION_MS=${{ secrets.JWT_ACCESS_EXPIRATION_MS }} \
            JWT_REFRESH_EXPIRATION_MS=${{ secrets.JWT_REFRESH_EXPIRATION_MS }} \
            SPRING_GOOGLE_CLIENT_ID=${{ secrets.SPRING_GOOGLE_CLIENT_ID }} \
            SPRING_GOOGLE_CLIENT_SECRET=${{ secrets.SPRING_GOOGLE_CLIENT_SECRET }} \
            SPRING_GITHUB_CLIENT_ID=${{ secrets.SPRING_GITHUB_CLIENT_ID }} \
            SPRING_GITHUB_CLIENT_SECRET=${{ secrets.SPRING_GITHUB_CLIENT_SECRET }} \
            SENDGRID_API_KEY=${{ secrets.SENDGRID_API_KEY }} \
            SENDGRID_FROM_EMAIL=${{ secrets.SENDGRID_FROM_EMAIL }} \
            SENDGRID_TEMPLATE_ID=${{ secrets.SENDGRID_TEMPLATE_ID }} \
          --restart-policy Always
        
        # Deploy the supporting services separately but with predictable FQDNs
        echo "Creating Core PostgreSQL Database..."
        az container create \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --name scholarai-buet-core-db \
          --image postgres:17-alpine \
          --registry-login-server index.docker.io \
          --registry-username ${{ secrets.DOCKER_HUB_USERNAME }} \
          --registry-password ${{ secrets.DOCKER_HUB_PASSWORD }} \
          --dns-name-label scholarai-buet-core-db \
          --os-type Linux \
          --ports 5432 \
          --cpu 0.5 \
          --memory 1 \
          --environment-variables \
            POSTGRES_USER=${{ secrets.CORE_DB_USER }} \
            POSTGRES_PASSWORD=${{ secrets.CORE_DB_PASSWORD }} \
            POSTGRES_DB=coreDB \
          --restart-policy Always &
        
        echo "Creating Paper PostgreSQL Database..."
        az container create \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --name scholarai-buet-paper-db \
          --image postgres:17-alpine \
          --registry-login-server index.docker.io \
          --registry-username ${{ secrets.DOCKER_HUB_USERNAME }} \
          --registry-password ${{ secrets.DOCKER_HUB_PASSWORD }} \
          --dns-name-label scholarai-buet-paper-db \
          --os-type Linux \
          --ports 5432 \
          --cpu 0.5 \
          --memory 1 \
          --environment-variables \
            POSTGRES_USER=${{ secrets.PAPER_DB_USER }} \
            POSTGRES_PASSWORD=${{ secrets.PAPER_DB_PASSWORD }} \
            POSTGRES_DB=paperDB \
          --restart-policy Always &
        
        echo "Creating RabbitMQ..."
        az container create \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --name scholarai-buet-rabbitmq \
          --image rabbitmq:3.12-management \
          --registry-login-server index.docker.io \
          --registry-username ${{ secrets.DOCKER_HUB_USERNAME }} \
          --registry-password ${{ secrets.DOCKER_HUB_PASSWORD }} \
          --dns-name-label scholarai-buet-rabbitmq \
          --os-type Linux \
          --ports 5672 15672 \
          --cpu 0.5 \
          --memory 1 \
          --environment-variables \
            RABBITMQ_DEFAULT_USER=${{ secrets.RABBITMQ_USER }} \
            RABBITMQ_DEFAULT_PASS=${{ secrets.RABBITMQ_PASSWORD }} \
          --restart-policy Always &
        
        echo "Creating Redis..."
        az container create \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --name scholarai-buet-redis \
          --image redis:7-alpine \
          --registry-login-server index.docker.io \
          --registry-username ${{ secrets.DOCKER_HUB_USERNAME }} \
          --registry-password ${{ secrets.DOCKER_HUB_PASSWORD }} \
          --dns-name-label scholarai-buet-redis \
          --os-type Linux \
          --ports 6379 \
          --cpu 0.25 \
          --memory 0.5 \
          --command-line "redis-server --requirepass ${{ secrets.REDIS_PASSWORD }}" \
          --restart-policy Always &
        
        # Wait for all background jobs to complete
        wait
        
        echo "‚úÖ All services deployed!"
        echo "üåê API: https://scholarai-buet-api.eastus.azurecontainer.io:8080"
        echo "üóÑÔ∏è Core DB: scholarai-buet-core-db.eastus.azurecontainer.io:5432"
        echo "üóÑÔ∏è Paper DB: scholarai-buet-paper-db.eastus.azurecontainer.io:5432"
        echo "üê∞ RabbitMQ UI: https://scholarai-buet-rabbitmq.eastus.azurecontainer.io:15672"
        echo "üì¶ Redis: scholarai-buet-redis.eastus.azurecontainer.io:6379" 