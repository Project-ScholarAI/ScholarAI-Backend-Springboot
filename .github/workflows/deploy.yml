name: Spring Boot Backend CI/CD

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  AZURE_CONTAINER_REGISTRY: scholarai
  RESOURCE_GROUP: scholarai-rg
  CONTAINER_NAME: scholarai-spring
  IMAGE_NAME: scholarai-spring

jobs:
    # test:
  #   runs-on: ubuntu-latest
  #   steps:
  #   - uses: actions/checkout@v4
  #   
  #   - name: Setup Java
  #     uses: actions/setup-java@v4
  #     with:
  #       java-version: '21'
  #       distribution: 'corretto'
  #   
  #   - name: Cache Maven dependencies
  #     uses: actions/cache@v3
  #     with:
  #       path: ~/.m2
  #       key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
  #       restore-keys: ${{ runner.os }}-m2
  #   
  #   - name: Make mvnw executable
  #     run: chmod +x mvnw
  #   
  #   - name: Run tests
  #     run: ./mvnw clean test
  #   
  #   - name: Build application
  #     run: ./mvnw clean package -DskipTests

  build-and-deploy:
    # needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Login to Azure Container Registry
      run: |
        az acr login --name ${{ env.AZURE_CONTAINER_REGISTRY }}
    
    - name: Build and push Docker image
      run: |
        docker build \
          --build-arg ENV=prod \
          -t ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }} \
          -t ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.IMAGE_NAME }}:latest \
          -f docker/Dockerfile .
        
        docker push ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }}
        docker push ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.IMAGE_NAME }}:latest
    
    - name: Deploy Core Services (if not exists)
      run: |
        # Function to retry commands
        retry_command() {
          local max_attempts=3
          local delay=30
          local attempt=1
          
          while [ $attempt -le $max_attempts ]; do
            if "$@"; then
              return 0
            else
              echo "Attempt $attempt failed. Retrying in $delay seconds..."
              sleep $delay
              ((attempt++))
            fi
          done
          
          echo "All $max_attempts attempts failed."
          return 1
        }
        # Deploy Single PostgreSQL with Multiple Databases (COST OPTIMIZED)
        if ! az container show --resource-group ${{ env.RESOURCE_GROUP }} --name scholarai-postgres > /dev/null 2>&1; then
          echo "Creating Shared PostgreSQL Database..."
          retry_command az container create \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --name scholarai-postgres \
            --image postgres:17-alpine \
            --registry-login-server index.docker.io \
            --registry-username ${{ secrets.DOCKER_HUB_USERNAME }} \
            --registry-password ${{ secrets.DOCKER_HUB_PASSWORD }} \
            --os-type Linux \
            --environment-variables \
              POSTGRES_USER=${{ secrets.CORE_DB_USER }} \
              POSTGRES_PASSWORD=${{ secrets.CORE_DB_PASSWORD }} \
              POSTGRES_MULTIPLE_DATABASES=coreDB,paperDB \
            --ports 5432 \
            --cpu 0.25 \
            --memory 1 \
            --restart-policy Always
        fi
        
        # Deploy Lightweight RabbitMQ
        if ! az container show --resource-group ${{ env.RESOURCE_GROUP }} --name scholarai-rabbitmq > /dev/null 2>&1; then
          echo "Creating RabbitMQ..."
          retry_command az container create \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --name scholarai-rabbitmq \
            --image rabbitmq:3.12-alpine \
            --registry-login-server index.docker.io \
            --registry-username ${{ secrets.DOCKER_HUB_USERNAME }} \
            --registry-password ${{ secrets.DOCKER_HUB_PASSWORD }} \
            --os-type Linux \
            --environment-variables \
              RABBITMQ_DEFAULT_USER=${{ secrets.RABBITMQ_USER }} \
              RABBITMQ_DEFAULT_PASS=${{ secrets.RABBITMQ_PASSWORD }} \
            --ports 5672 \
            --cpu 0.25 \
            --memory 0.5 \
            --restart-policy Always
        fi
        
        # Deploy Lightweight Redis
        if ! az container show --resource-group ${{ env.RESOURCE_GROUP }} --name scholarai-redis > /dev/null 2>&1; then
          echo "Creating Redis..."
          retry_command az container create \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --name scholarai-redis \
            --image redis:7-alpine \
            --registry-login-server index.docker.io \
            --registry-username ${{ secrets.DOCKER_HUB_USERNAME }} \
            --registry-password ${{ secrets.DOCKER_HUB_PASSWORD }} \
            --os-type Linux \
            --command-line "redis-server --requirepass ${{ secrets.REDIS_PASSWORD }}" \
            --ports 6379 \
            --cpu 0.1 \
            --memory 0.5 \
            --restart-policy Always
        fi
    
    - name: Deploy Spring Boot Application
      run: |
        # Check if container exists
        if az container show --resource-group ${{ env.RESOURCE_GROUP }} --name ${{ env.CONTAINER_NAME }} > /dev/null 2>&1; then
          echo "Container exists, deleting old container..."
          az container delete --resource-group ${{ env.RESOURCE_GROUP }} --name ${{ env.CONTAINER_NAME }} --yes
        fi
        
        # Wait for core services to be ready
        echo "Waiting for core services to be ready..."
        sleep 30
        
        # Create new container
        az container create \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --name ${{ env.CONTAINER_NAME }} \
          --image ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }} \
          --registry-login-server ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io \
          --registry-username ${{ secrets.ACR_USERNAME }} \
          --registry-password ${{ secrets.ACR_PASSWORD }} \
          --dns-name-label scholarai-api \
          --os-type Linux \
          --ports 8080 \
          --cpu 0.5 \
          --memory 1 \
          --environment-variables \
            SPRING_PROFILES_ACTIVE=prod \
            ENV=prod \
          --restart-policy Always
        
        echo "Spring Boot backend deployed successfully!"
        echo "Access at: https://scholarai-api.eastus.azurecontainer.io:8080" 